---
import fs from "fs";
import path from "path";
import { parse } from "csv-parse/sync";
import Layout from "../../layouts/Layouts.astro";
import { Image } from "astro:assets";

export async function getStaticPaths() {
    // Path to CSV inside /public
    const file = path.resolve("./public/sampledata.csv");
    const csv = fs.readFileSync(file, "utf8");

    // Parse CSV into an array of rows
    const data = parse(csv, { columns: true, skip_empty_lines: true });

    // Map rows to category/slug paths
    return data.map((row: any) => ({
        params: {
            category: row.category.toLowerCase(),
            slug: row.slug.toLowerCase(),
        },
        props: { ...row, allData: data },
    }));
}

const { props } = Astro;
const { title, meta_description, h1, content, image_url, backlinks, allData } =
    props;

// Generate related articles dynamically from CSV data
const generateRelatedArticles = (
    currentCategory: string,
    currentSlug: string,
    allData: any[]
) => {
    return allData
        .filter(
            (article) =>
                article.category === currentCategory &&
                article.slug !== currentSlug
        )
        .map((article) => ({
            category: article.category,
            slug: article.slug,
            title: article.title,
        }))
        .slice(0, 3);
};

const relatedArticles = generateRelatedArticles(
    props.category,
    props.slug,
    allData
);

// Calculate estimated reading time
const calculateReadingTime = (text: string): number => {
    const wordsPerMinute = 200;
    const wordCount = text.split(/\s+/).length;
    return Math.max(1, Math.ceil(wordCount / wordsPerMinute));
};

const readingTime = calculateReadingTime(content);
---

<Layout>
    <Fragment slot="head">
        <title>{title} | firefly</title>
        <meta name="description" content={meta_description} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={meta_description} />
        <meta property="og:image" content={image_url} />
        <meta property="og:type" content="article" />
        <meta
            property="og:url"
            content={`https://firefly.com/${props.category}/${props.slug}/`}
        />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={meta_description} />
        <meta name="twitter:image" content={image_url} />
        <link
            rel="canonical"
            href={`https://firefly.com/${props.category}/${props.slug}/`}
        />

        <script
            type="application/ld+json"
            set:html={JSON.stringify({
                "@context": "https://schema.org",
                "@type": "Article",
                headline: title,
                description: meta_description,
                image: image_url,
                author: {
                    "@type": "Organization",
                    name: "firefly",
                },
                publisher: {
                    "@type": "Organization",
                    name: "firefly",
                    logo: {
                        "@type": "ImageObject",
                        url: "https://firefly.com/logo.png",
                    },
                },
                url: `https://firefly.com/${props.category}/${props.slug}/`,
                datePublished: new Date().toISOString(),
                dateModified: new Date().toISOString(),
                mainEntityOfPage: {
                    "@type": "WebPage",
                    "@id": `https://firefly.com/${props.category}/${props.slug}/`,
                },
            })}
        />

        <script
            type="application/ld+json"
            set:html={JSON.stringify({
                "@context": "https://schema.org",
                "@type": "BreadcrumbList",
                itemListElement: [
                    {
                        "@type": "ListItem",
                        position: 1,
                        name: "Home",
                        item: "https://firefly.com/",
                    },
                    {
                        "@type": "ListItem",
                        position: 2,
                        name: props.category
                            .replace("-", " ")
                            .replace(/\b\w/g, (l: string) => l.toUpperCase()),
                        item: `https://firefly.com/${props.category}/`,
                    },
                    {
                        "@type": "ListItem",
                        position: 3,
                        name: title,
                        item: `https://firefly.com/${props.category}/${props.slug}/`,
                    },
                ],
            })}
        />
    </Fragment>

    <main class="max-w-4xl mx-auto px-6 py-12">
        <!-- Breadcrumb Navigation -->
        <nav class="mb-8">
            <ol class="flex items-center space-x-2 text-sm text-gray-600">
                <li><a href="/" class="hover:text-blue-600">Home</a></li>
                <li class="text-gray-400">/</li>
                <li class="capitalize">{props.category.replace("-", " ")}</li>
                <li class="text-gray-400">/</li>
                <li class="text-gray-900 font-medium">{title}</li>
            </ol>
        </nav>

        <!-- Hero Section -->
        <header class="mb-12">
            <div
                class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-8"
            >
                <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
                    {h1}
                </h1>
                <p class="text-xl text-gray-700 leading-relaxed mb-4">
                    {meta_description}
                </p>
                <div class="flex items-center text-sm text-gray-600">
                    <svg
                        class="w-4 h-4 mr-2"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                        ></path>
                    </svg>
                    <span>{readingTime} min read</span>
                </div>
            </div>
        </header>

        <!-- Featured Image -->
        {
            image_url && (
                <div class="mb-12">
                    <Image
                        src={image_url}
                        alt={`${title} - ${meta_description}`}
                        width={800}
                        height={400}
                        class="w-full h-96 object-cover rounded-xl shadow-lg"
                        loading="lazy"
                        format="webp"
                        quality={85}
                    />
                </div>
            )
        }

        <!-- Main Content -->
        <article class="mb-12">
            <div class="prose prose-lg max-w-none">
                <h2 class="text-2xl font-bold text-gray-900 mb-6">Overview</h2>
                <p class="text-lg leading-relaxed text-gray-700 mb-8">
                    {content}
                </p>

                <h2 class="text-2xl font-bold text-gray-900 mb-6">
                    Key Benefits
                </h2>
                <div
                    class="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-8"
                >
                    <ul class="space-y-3 text-gray-700">
                        <li class="flex items-start">
                            <svg
                                class="w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                    clip-rule="evenodd"></path>
                            </svg>
                            <span
                                >AI-powered organization that eliminates manual
                                folder management</span
                            >
                        </li>
                        <li class="flex items-start">
                            <svg
                                class="w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                    clip-rule="evenodd"></path>
                            </svg>
                            <span
                                >Instant search and retrieval of any file or
                                note</span
                            >
                        </li>
                        <li class="flex items-start">
                            <svg
                                class="w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                    clip-rule="evenodd"></path>
                            </svg>
                            <span
                                >Smart auto-tagging based on content analysis</span
                            >
                        </li>
                    </ul>
                </div>
            </div>
        </article>

        <!-- Related Articles -->
        {
            relatedArticles.length > 0 && (
                <section class="mb-12">
                    <h2 class="text-3xl font-bold text-gray-900 mb-8">
                        Related Articles
                    </h2>
                    <div class="grid md:grid-cols-3 gap-6">
                        {relatedArticles.map((article) => (
                            <div class="bg-white border border-gray-200 rounded-lg p-6 hover:border-blue-300 transition-colors">
                                <a
                                    href={`/${article.category}/${article.slug}/`}
                                    class="block group"
                                >
                                    <h3 class="text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors mb-2">
                                        {article.title}
                                    </h3>
                                    <p class="text-sm text-gray-500 capitalize">
                                        {article.category.replace("-", " ")}
                                    </p>
                                </a>
                            </div>
                        ))}
                    </div>
                </section>
            )
        }

        <!-- Related Links Section -->
        {
            backlinks && backlinks.trim() && (
                <aside class="bg-gray-50 rounded-xl p-8">
                    <h2 class="text-2xl font-bold text-gray-900 mb-6">
                        Related Resources
                    </h2>
                    <div class="grid gap-4">
                        {backlinks.split(",").map((link: string) => {
                            const cleanLink = link.trim();
                            if (!cleanLink) return null;

                            let domain;
                            try {
                                domain = new URL(cleanLink).hostname;
                            } catch {
                                domain = cleanLink
                                    .replace(/^https?:\/\//, "")
                                    .split("/")[0];
                            }
                            return (
                                <div class="bg-white rounded-lg p-4 border border-gray-200 hover:border-blue-300 transition-colors">
                                    <a
                                        href={cleanLink}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        class="block group"
                                    >
                                        <div class="flex items-center justify-between">
                                            <div>
                                                <p class="font-medium text-gray-900 group-hover:text-blue-600 transition-colors">
                                                    {domain}
                                                </p>
                                                <p class="text-sm text-gray-500 mt-1 truncate">
                                                    {cleanLink}
                                                </p>
                                            </div>
                                            <svg
                                                class="w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors"
                                                fill="none"
                                                stroke="currentColor"
                                                viewBox="0 0 24 24"
                                            >
                                                <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    stroke-width="2"
                                                    d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                                                />
                                            </svg>
                                        </div>
                                    </a>
                                </div>
                            );
                        })}
                    </div>
                </aside>
            )
        }

        <!-- Back to Home -->
        <div class="mt-12 text-center">
            <a
                href="/"
                class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
            >
                <svg
                    class="w-4 h-4 mr-2"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to Home
            </a>
        </div>
    </main>
</Layout>
